#!/usr/bin/env python3
"""
Convert HTML payslips to PDF format for AI vision model testing

This script converts the HTML payslips generated by generate_test_data.py
into PDF files that can be processed by vision models.

Requirements:
    pip install weasyprint

Alternative (if weasyprint has issues):
    pip install pdfkit
    # Also requires wkhtmltopdf system installation
"""

import os
import glob
from pathlib import Path


def convert_with_weasyprint(html_path: str, pdf_path: str) -> bool:
    """Convert HTML to PDF using WeasyPrint"""
    try:
        from weasyprint import HTML
        HTML(filename=html_path).write_pdf(pdf_path)
        return True
    except ImportError:
        print("‚ùå WeasyPrint not installed. Install with: pip install weasyprint")
        return False
    except Exception as e:
        print(f"‚ùå WeasyPrint conversion failed for {html_path}: {e}")
        return False


def convert_with_pdfkit(html_path: str, pdf_path: str) -> bool:
    """Convert HTML to PDF using pdfkit (requires wkhtmltopdf)"""
    try:
        import pdfkit
        options = {
            'page-size': 'A4',
            'margin-top': '0.75in',
            'margin-right': '0.75in',
            'margin-bottom': '0.75in',
            'margin-left': '0.75in',
            'encoding': "UTF-8",
            'no-outline': None
        }
        pdfkit.from_file(html_path, pdf_path, options=options)
        return True
    except ImportError:
        print("‚ùå pdfkit not installed. Install with: pip install pdfkit")
        print("‚ùå Also requires system installation of wkhtmltopdf")
        return False
    except Exception as e:
        print(f"‚ùå pdfkit conversion failed for {html_path}: {e}")
        return False


def convert_payslips_to_pdf(test_data_dir: str = "./test_data"):
    """Convert all HTML payslips to PDF format"""

    payslips_dir = os.path.join(test_data_dir, "payslips")

    if not os.path.exists(payslips_dir):
        print(f"‚ùå Payslips directory not found: {payslips_dir}")
        print("Run generate_test_data.py first to create test data.")
        return

    # Find all HTML files
    html_pattern = os.path.join(payslips_dir, "**", "*.html")
    html_files = glob.glob(html_pattern, recursive=True)

    if not html_files:
        print(f"‚ùå No HTML payslips found in {payslips_dir}")
        return

    print(f"üîÑ Converting {len(html_files)} HTML payslips to PDF...")

    successful_conversions = 0
    failed_conversions = 0

    for html_path in html_files:
        # Generate PDF path
        pdf_path = html_path.replace('.html', '.pdf')

        print(f"   üìÑ {os.path.basename(html_path)} -> {os.path.basename(pdf_path)}")

        # Try WeasyPrint first, fallback to pdfkit
        success = convert_with_weasyprint(html_path, pdf_path)

        if not success:
            success = convert_with_pdfkit(html_path, pdf_path)

        if success:
            successful_conversions += 1
        else:
            failed_conversions += 1

    print(f"\n‚úÖ Conversion complete!")
    print(f"   ‚úì Successful: {successful_conversions}")
    print(f"   ‚ùå Failed: {failed_conversions}")

    if successful_conversions > 0:
        print(f"\nüí° PDF payslips are ready for AI vision model testing!")
        print(f"   üìÅ Location: {payslips_dir}")

        # Show sample structure
        sample_files = glob.glob(os.path.join(payslips_dir, "**", "*.pdf"), recursive=True)[:3]
        if sample_files:
            print(f"\nüìã Sample files:")
            for pdf_file in sample_files:
                rel_path = os.path.relpath(pdf_file, test_data_dir)
                print(f"   - {rel_path}")

    if failed_conversions > 0:
        print(f"\n‚ö†Ô∏è  Some conversions failed. Try installing:")
        print(f"   pip install weasyprint")
        print(f"   # or")
        print(f"   pip install pdfkit")
        print(f"   # (pdfkit also requires wkhtmltopdf system installation)")


def create_sample_vision_test():
    """Create a simple script to test vision model processing"""

    sample_script = '''#!/usr/bin/env python3
"""
Sample script for testing AI vision model processing of Spanish payslips

This script shows how to process the generated PDF payslips with a vision model
to extract structured payroll data.
"""

import os
import glob
import base64
from pathlib import Path

def encode_pdf_for_vision_model(pdf_path: str) -> str:
    """Encode PDF file as base64 for vision model processing"""
    with open(pdf_path, 'rb') as f:
        return base64.b64encode(f.read()).decode('utf-8')

def process_payslip_with_vision_model(pdf_path: str):
    """
    Process a Spanish payslip PDF with a vision model

    This is a template - replace with your actual vision model API calls
    (OpenAI GPT-4V, Google Cloud Vision, Azure Computer Vision, etc.)
    """

    print(f"üîç Processing: {os.path.basename(pdf_path)}")

    # Encode PDF for vision model
    pdf_base64 = encode_pdf_for_vision_model(pdf_path)

    # TODO: Replace with actual vision model API call
    # Example structure for OpenAI GPT-4V:
    """
    response = openai.chat.completions.create(
        model="gpt-4o",  # or gpt-4-vision-preview
        messages=[
            {
                "role": "user",
                "content": [
                    {
                        "type": "text",
                        "text": "Extract all payroll data from this Spanish payslip. Return as JSON with: employee_name, document_id, period_dates, gross_total, net_total, irpf_base, irpf_withheld, social_security_employee, and all concept lines."
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:application/pdf;base64,{pdf_base64}"
                        }
                    }
                ]
            }
        ],
        max_tokens=1000
    )
    """

    # For now, return mock extracted data
    mock_extracted_data = {
        "employee_name": "SAMPLE EMPLOYEE",
        "document_id": "12345678A",
        "period_start": "2025-03-01",
        "period_end": "2025-03-31",
        "gross_total": 1500.00,
        "net_total": 1200.00,
        "irpf_base": 1500.00,
        "irpf_withheld": 225.00,
        "social_security_employee": 75.00,
        "concepts": [
            {"code": "001", "description": "Salario base", "amount": 1200.00},
            {"code": "120", "description": "Plus convenio", "amount": 300.00},
            {"code": "700", "description": "IRPF", "amount": -225.00},
            {"code": "730", "description": "SS Trabajador", "amount": -75.00}
        ]
    }

    return mock_extracted_data

def test_vision_processing(test_data_dir: str = "./test_data"):
    """Test vision model processing on generated payslips"""

    payslips_dir = os.path.join(test_data_dir, "payslips")
    pdf_pattern = os.path.join(payslips_dir, "**", "*.pdf")
    pdf_files = glob.glob(pdf_pattern, recursive=True)

    if not pdf_files:
        print("‚ùå No PDF payslips found. Run convert_payslips_to_pdf.py first.")
        return

    print(f"üß™ Testing vision model processing on {len(pdf_files)} payslips...")

    # Process first 3 payslips as samples
    sample_files = pdf_files[:3]

    for pdf_path in sample_files:
        try:
            extracted_data = process_payslip_with_vision_model(pdf_path)
            print(f"   ‚úì Extracted: {extracted_data['employee_name']} - {extracted_data['gross_total']}‚Ç¨")
        except Exception as e:
            print(f"   ‚ùå Failed to process {os.path.basename(pdf_path)}: {e}")

    print(f"\\nüí° Replace the mock vision model calls with actual API integration!")

if __name__ == "__main__":
    test_vision_processing()
'''

    with open('./test_vision_processing.py', 'w', encoding='utf-8') as f:
        f.write(sample_script)

    print("üìù Created sample vision processing script: test_vision_processing.py")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='Convert HTML payslips to PDF format')
    parser.add_argument('--test-data-dir', default='./test_data', help='Test data directory')
    parser.add_argument('--create-vision-sample', action='store_true', help='Create sample vision processing script')

    args = parser.parse_args()

    convert_payslips_to_pdf(args.test_data_dir)

    if args.create_vision_sample:
        create_sample_vision_test()