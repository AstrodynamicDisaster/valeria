#!/usr/bin/env python3
"""
ValerIA Database Reset Script
Drops all tables and recreates a clean database for testing

WARNING: This will delete ALL data in the database!
"""

import os
import sys
from sqlalchemy import create_engine, text, MetaData
from sqlalchemy.exc import OperationalError
from setup_database import Base, create_database_engine


def confirm_reset():
    """Ask user to confirm database reset"""
    print("⚠️  WARNING: This will DELETE ALL data in the ValerIA database!")
    print("   This action cannot be undone.")
    print()

    response = input("Are you sure you want to reset the database? (type 'YES' to confirm): ")

    if response.strip() != 'YES':
        print("❌ Database reset cancelled.")
        return False

    return True


def reset_database():
    """Drop all tables and reset database to clean state"""

    if not confirm_reset():
        return False

    print("🔄 Starting database reset...")

    try:
        # Create database engine
        engine = create_database_engine()

        print("✓ Database connection established")

        # Drop all tables using SQLAlchemy metadata
        print("🗑️  Dropping all existing tables...")

        # Reflect current database structure
        metadata = MetaData()
        metadata.reflect(bind=engine)

        # Drop all tables in reverse dependency order
        metadata.drop_all(engine)

        print("✓ All tables dropped successfully")

        # Optionally, you can also clean up any sequences, functions, etc.
        with engine.connect() as conn:
            # Drop any remaining sequences (auto-generated by SERIAL columns)
            result = conn.execute(text("""
                SELECT sequence_name FROM information_schema.sequences
                WHERE sequence_schema = 'public';
            """))

            sequences = result.fetchall()
            for (seq_name,) in sequences:
                try:
                    conn.execute(text(f"DROP SEQUENCE IF EXISTS {seq_name} CASCADE;"))
                    print(f"  ✓ Dropped sequence: {seq_name}")
                except Exception as e:
                    print(f"  ⚠️  Could not drop sequence {seq_name}: {e}")

            # Commit the changes
            conn.commit()

        print("✓ Database reset completed successfully!")
        print()
        print("💡 You can now run: python setup_database.py")

        return True

    except OperationalError as e:
        if "does not exist" in str(e).lower():
            print("❌ Database connection failed. Make sure PostgreSQL is running.")
        else:
            print(f"❌ Database error: {e}")
        return False

    except Exception as e:
        print(f"❌ Unexpected error during reset: {e}")
        return False


def reset_documents_folder():
    """Reset the local documents folder"""
    print("🗑️  Resetting documents folder...")

    import shutil

    docs_dir = "./documents"

    if os.path.exists(docs_dir):
        try:
            shutil.rmtree(docs_dir)
            print("✓ Documents folder removed")
        except Exception as e:
            print(f"⚠️  Could not remove documents folder: {e}")

    # Recreate empty documents folder
    os.makedirs(docs_dir, exist_ok=True)
    print("✓ Clean documents folder created")


def reset_test_data():
    """Reset test data folder"""
    response = input("Do you also want to reset test data folder? (y/N): ")

    if response.lower() in ['y', 'yes']:
        print("🗑️  Resetting test data...")

        import shutil

        test_data_dir = "./test_data"

        if os.path.exists(test_data_dir):
            try:
                shutil.rmtree(test_data_dir)
                print("✓ Test data folder removed")
            except Exception as e:
                print(f"⚠️  Could not remove test data folder: {e}")


def main():
    """Main reset function"""
    print("🚀 ValerIA Database Reset Tool")
    print("=" * 50)

    # Reset database tables
    if reset_database():
        # Reset local file storage
        reset_documents_folder()

        # Optionally reset test data
        reset_test_data()

        print()
        print("🎉 Complete reset finished!")
        print()
        print("Next steps:")
        print("1. python setup_database.py")
        print("2. python generate_test_data.py")

        return 0
    else:
        return 1


if __name__ == "__main__":
    exit(main())